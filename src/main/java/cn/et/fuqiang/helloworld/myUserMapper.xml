<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="myuser">
     <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
     -->
    <!-- 
        根据id查询得到一个user对象
        parameterType 传入的参数可以是一个任何类型
     -->
    <select id="selectUserById" parameterType="int" resultType="java.util.Map">
    
       select * from myuser where userid=#{id}
    </select>
    
    <insert id="insertUserByMap" parameterType="java.util.Map" >
    
    	<!--selectKey是插入语句，和修改语句中特有的标签
    	keyProperty    key的名字
    	order      	   BEFORE/AFTER  在insert语句之前或者之后
    	resultType     查询语句返回的类型
    	-->
    	<selectKey keyProperty="userid" order="BEFORE" resultType="int">
    		select nvl(max(userid),0)+1 from myuser
    	</selectKey>
    <!-- 从map中获取值    #{key} 获取对应的值 -->
    	insert into myuser(userid,username,userage) values(#{userid},#{username},#{userage})
    </insert>
    
    <delete id="deleteUserById" parameterType="java.lang.Integer" >
    
    	delete from myuser where userid=#{id}
    </delete>
    
    <update id="updateUserByMap">
    	update myuser set username=#{username},userage=#{userage} where userid=#{userid}
    </update>
    <!-- 练习使用typeAiase标签(在mybatis配置文件中使用)   创建类别名设置返回类型    默认的别名在TypeAliasRegistry.class类中查看-->
    <select id="selectUserGetUser" resultType="myUser">
    	 select * from myuser where userid=#{id}
    </select>
    
   
    
</mapper>